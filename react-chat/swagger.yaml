openapi: 3.0.3
info:
  title: Messenger API
  version: 1.0.0
  description: Messenger Backend
paths:
  /api/auth/:
    post:
      operationId: auth_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/centrifugo/connect/:
    post:
      operationId: centrifugo_connect_create
      tags:
        - centrifugo
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/centrifugo/subscribe/:
    post:
      operationId: centrifugo_subscribe_create
      tags:
        - centrifugo
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/chat/{id}/:
    get:
      operationId: chat_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - chat
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
    patch:
      operationId: chat_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGroupChatPatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGroupChatPatch'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGroupChatPatch'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChatPatch'
          description: ''
    delete:
      operationId: chat_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - chat
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/chat/{id}/leave/:
    post:
      operationId: chat_leave_create
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - chat
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/chats/:
    get:
      operationId: chats_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: page_size
          required: false
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - chats
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatList'
          description: ''
    post:
      operationId: chats_create
      tags:
        - chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Chat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Chat'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: ''
  /api/message/{id}/:
    get:
      operationId: message_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - message
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    patch:
      operationId: message_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMessage'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
    delete:
      operationId: message_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - message
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/message/{id}/read/:
    post:
      operationId: message_read_create
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - message
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/messages/:
    get:
      operationId: messages_list
      parameters:
        - name: chat
          required: true
          in: query
          description: A chatId.
          schema:
            type: string
            format: uuid
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: page_size
          required: false
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - messages
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageList'
          description: ''
    post:
      operationId: messages_create
      tags:
        - messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageCreate'
        required: true
      security:
        - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageCreate'
          description: ''
  /api/register/:
    post:
      operationId: register_create
      tags:
        - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /api/user/current/:
    get:
      operationId: user_current_retrieve
      tags:
        - user
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/{id}/:
    get:
      operationId: user_retrieve
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this user.
          required: true
      tags:
        - user
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: user_partial_update
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this user.
          required: true
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: user_destroy
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: A UUID string identifying this user.
          required: true
      tags:
        - user
      security:
        - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/user/offline/:
    post:
      operationId: user_offline_create
      tags:
        - user
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/user/online/:
    post:
      operationId: user_online_create
      tags:
        - user
      security:
        - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/:
    get:
      operationId: users_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: page_size
          required: false
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - users
      security:
        - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
components:
  schemas:
    LastMessage:
      type: object
      properties:
        chat:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        files:
          type: array
          items:
            $ref: '#/components/schemas/MessageFile'
        id:
          type: string
          format: uuid
        sender:
          $ref: '#/components/schemas/User'
        text:
          type: string
        updated_at:
          type: string
          format: date-time
          nullable: true
        voice:
          type: string
          format: uri
          nullable: true
        was_read_by:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Chat:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          readOnly: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        creator:
          $ref: '#/components/schemas/User'
        avatar:
          type: string
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_private:
          type: boolean
        last_message:
          $ref: '#/components/schemas/LastMessage'
      required:
        - created_at
        - creator
        - id
        - is_private
        - last_message
        - members
        - title
        - updated_at
    GroupChatPatch:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 150
        members:
          type: array
          items:
            type: string
            format: uuid
        avatar:
          type: string
          format: uri
          nullable: true
          pattern: (?:jpg|jpeg|png)$
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_private:
          type: boolean
          readOnly: true
      required:
        - created_at
        - id
        - is_private
        - members
        - title
        - updated_at
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        text:
          type: string
          nullable: true
          maxLength: 2000
        voice:
          type: string
          format: uri
          readOnly: true
          nullable: true
        sender:
          $ref: '#/components/schemas/User'
        chat:
          type: string
          format: uuid
          readOnly: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/MessageFile'
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        was_read_by:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - chat
        - created_at
        - files
        - id
        - sender
        - updated_at
        - voice
        - was_read_by
    MessageCreate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        text:
          type: string
          nullable: true
          maxLength: 2000
        voice:
          type: string
          format: uri
          nullable: true
          pattern: (?:mp3|wav|ogg)$
        chat:
          type: string
          format: uuid
        files:
          type: array
          items:
            $ref: '#/components/schemas/MessageFile'
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        was_read_by:
          type: array
          items:
            type: string
            format: uuid
          readOnly: true
      required:
        - chat
        - created_at
        - id
        - updated_at
        - was_read_by
    MessageFile:
      type: object
      properties:
        item:
          type: string
          format: uri
          nullable: true
    PaginatedChatList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
    PaginatedMessageList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    PaginatedUserList:
      type: object
      required:
        - count
        - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedGroupChatPatch:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 150
        members:
          type: array
          items:
            type: string
            format: uuid
        avatar:
          type: string
          format: uri
          nullable: true
          pattern: (?:jpg|jpeg|png)$
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_private:
          type: boolean
          readOnly: true
    PatchedMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        text:
          type: string
          nullable: true
          maxLength: 2000
        voice:
          type: string
          format: uri
          readOnly: true
          nullable: true
        sender:
          $ref: '#/components/schemas/User'
        chat:
          type: string
          format: uuid
          readOnly: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/MessageFile'
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        was_read_by:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
          nullable: true
          maxLength: 450
        avatar:
          type: string
          format: uri
          nullable: true
          pattern: (?:jpg|jpeg|png)$
        is_online:
          type: boolean
          readOnly: true
        last_online_at:
          type: string
          format: date-time
          readOnly: true
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
        - access
        - password
        - refresh
        - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
        - access
        - refresh
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
          nullable: true
          maxLength: 450
        avatar:
          type: string
          format: uri
          nullable: true
          pattern: (?:jpg|jpeg|png)$
        is_online:
          type: boolean
          readOnly: true
        last_online_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - first_name
        - id
        - is_online
        - last_name
        - last_online_at
        - username
    UserCreate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
          nullable: true
          maxLength: 450
        avatar:
          type: string
          format: uri
          nullable: true
          pattern: (?:jpg|jpeg|png)$
        is_online:
          type: boolean
          readOnly: true
        last_online_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - first_name
        - id
        - is_online
        - last_name
        - last_online_at
        - password
        - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
